AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  VpcId:
      Type: AWS::EC2::VPC::Id
      Default: "vpc-11111111"
      Description: 'the vpc id to deploy ALB'
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Default: 'subnet-11111111,subnet-22222222'
    Description: 'the subnets ids to deploy ALB'
  DDBTableName:
    Type: String
    Default: 'AIGC_CONFIG'
  SageMakerEndpoint:
    Type: String
    Default: 'AIGC-Quick-Kit-a93xxxc-xxb4-4xxx-84a0-5xxxxx1'
    Description: 'Sagemaker Endpoint Name'

Resources:
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DDBTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SM_ENDPOINT"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SM_ENDPOINT"
          KeyType: "RANGE"
  StableDiffusionInferenceFunction:
    Type: AWS::Serverless::Function
    DependsOn: DDBTable
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.8
      CodeUri: app/
      Environment:
        Variables:
          SM_REGION: !Sub '${AWS::Region}'
          SM_ENDPOINT: !Ref SageMakerEndpoint
          S3_BUCKET: !Sub "sagemaker-${AWS::Region}-${AWS::AccountId}"
          S3_PREFIX: 'stablediffusion/asyncinvoke'
          CDN_BASE: !GetAtt CloudfrontDistribution.DomainName
          DDB_TABLE: !Ref DDBTable 
      Policies:
        # Give the Lambda service access to poll your DynamoDB, S3, SageMaker 
        - AmazonDynamoDBFullAccess
        - AWSLambdaExecute
        - AmazonS3FullAccess
        - AmazonSageMakerFullAccess

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets: !Ref Subnets   
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: StableDiffusionInferenceFunctionInvokePermission
    Properties:
      TargetType: lambda
      Targets:
      - Id: !GetAtt StableDiffusionInferenceFunction.Arn

  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  StableDiffusionInferenceFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt StableDiffusionInferenceFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  #如果只梆定第一个,WebConsole上看不见ALB Trigger
  StableDiffusionInferenceFunctionInvokePermission2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt StableDiffusionInferenceFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Ref TargetGroup
##########################################################################
#  CloudFront::CachePolicy                                               #
##########################################################################
  3hCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Comment: Cache for 3h
        Name: !Ref AWS::StackName
        DefaultTTL: 10800
        MaxTTL: 10800
        MinTTL: 10800
        Name: 3h
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - x-forwarded-for
          QueryStringsConfig:
            QueryStringBehavior: whitelist
            QueryStrings:
              - allowed_query_string_param

  
##########################################################################
#  CloudFront::Distribution                                              #
##########################################################################
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "AIGC OAI"
  SageMakerDefaultBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Sub "sagemaker-${AWS::Region}-${AWS::AccountId}"
      PolicyDocument:
        Statement:
        - Action: "s3:Get*"
          Effect: Allow
          Resource: !Sub "arn:aws:s3:::sagemaker-${AWS::Region}-${AWS::AccountId}/*"
          Principal:
            CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        PriceClass: PriceClass_100
        IPV6Enabled: true
        HttpVersion: http2 
        Origins:
          - Id: APIOrigin
            DomainName: !GetAtt LoadBalancer.DNSName
            CustomOriginConfig:
              HTTPSPort: 80
              OriginProtocolPolicy: http-only
          - Id: S3Origin  
            DomainName: !Sub "sagemaker-${AWS::Region}-${AWS::AccountId}.s3.${AWS::Region}.amazonaws.com"
            S3OriginConfig:
              OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !Ref OriginAccessIdentity]]
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ViewerProtocolPolicy: allow-all
          TargetOriginId: APIOrigin
          CachePolicyId: !Ref 3hCachePolicy
        CacheBehaviors:
          - PathPattern: "/stablediffusion/*"
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ViewerProtocolPolicy: allow-all
            TargetOriginId: S3Origin
            CachePolicyId: !Ref 3hCachePolicy
          - PathPattern: "/aigc/*"
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            ViewerProtocolPolicy: allow-all
            TargetOriginId: S3Origin
            CachePolicyId: !Ref 3hCachePolicy
          - PathPattern: "/task/*"
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
            ViewerProtocolPolicy: allow-all
            TargetOriginId: APIOrigin
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

Outputs:
  LoadBalancerDNSNAme:
    Value: !GetAtt LoadBalancer.DNSName
  DistributionDomainName:
    Description: "Distribution domain name"
    Value: !GetAtt CloudfrontDistribution.DomainName
    